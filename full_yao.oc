
#include "yao.h"
#include "wrapper.h"

#include "stdio.h"

#include <obliv.oh>

#define TAYLOR_ORDER 9

double sigmoid_taylor_d[TAYLOR_ORDER+1] = {1.0/2, 1.0/4, 0, -1.0/48, 0, 1.0/480, 0, -17.0/80640, 0, 31.0/1451520};
int sigmoid_taylor[TAYLOR_ORDER+1];

obliv int mult_oo(obliv int x, obliv int y) {
  return (x*y) >> PRECISION;
}

obliv int mult_op(obliv int x, int y) {
  return (x*y) >> PRECISION;
}

obliv int evalPolynomial(obliv int x, int* coeffs, int degree) {
  // assume that the first coefficient in the constant term, the second is the linear term etc.
  obliv int val = coeffs[degree];

  for (int i = degree-1; i >= 0; i--) {
    val = mult_oo(val, x);
    val = val + coeffs[i];
  }
  
  return val;
}

// use a taylor series to approximate the result
obliv int oblivious_logistic_fn(obliv int* model, obliv int* features, int num_features) {
  obliv int dot_product = 0;
  for (int i = 0; i < num_features; i++) {
    dot_product += mult_oo(model[i], features[i]);
  }

  return evalPolynomial(dot_product, sigmoid_taylor, TAYLOR_ORDER);
}

void load_sigmoid_taylor_coefficients() {
  int shift = (1 << PRECISION);
  for (int i = 0; i <= TAYLOR_ORDER; i++) {
    sigmoid_taylor[i] = sigmoid_taylor_d[i] * shift;
  }
}

void add_to_gradient(obliv int* grad, obliv int* model, obliv int* features, obliv int label, int num_features) {
  obliv int err = oblivious_logistic_fn(model, features, num_features) - (label << PRECISION);
  for (int k = 0; k < num_features; k++) {
    grad[k] += mult_oo(err, features[k]);
  }
}


void do_full_train(void* args) {
  fullProtocolIO* io = args;
  int** my_features = io->features;
  int* my_labels = io->labels;
  configuration_t* config = io->config;
  party_t* party = io->party;

  struct timeval t1, t2;
  gettimeofday(&t1, NULL);

  int num_entries = GetDataRowCount(party);
  int num_features = GetNumFeatures(party);

  /* first the parties need to share their data */
  obliv int* labels_a = calloc(num_entries, sizeof(obliv int));
  obliv int* labels_b = calloc(num_entries, sizeof(obliv int));

  obliv int* features_data_a = calloc(num_entries*num_features, sizeof(obliv int));
  obliv int* features_data_b = calloc(num_entries*num_features, sizeof(obliv int));

  obliv int** features_a = calloc(num_entries, sizeof(obliv int*));
  obliv int** features_b = calloc(num_entries, sizeof(obliv int*));

  for (int i = 0; i < num_entries; i++) {
    features_a[i] = &features_data_a[i*num_features];
    features_b[i] = &features_data_b[i*num_features];
  }

  feedOblivIntArray(labels_a, my_labels, num_entries, 1);
  feedOblivIntArray(labels_b, my_labels, num_entries, 2);

  feedOblivIntArray(features_data_a, *my_features, num_features * num_entries, 1);
  feedOblivIntArray(features_data_b, *my_features, num_features * num_entries, 2);
  
  // we'll need this for a lot of the math

  // precompute the taylor coefficients for the sigmoid function
  load_sigmoid_taylor_coefficients();
  
  obliv int* model = calloc(num_features, sizeof(obliv int));

  int iterations = GetIterationCount(config);
  int batch_size = GetBatchSize(config);

  int data_i = 0;
  
  for (int i = 0; i < iterations; i++) {
    obliv int* gradient = calloc(num_features, sizeof(obliv int));

    // don't worry about any privacy here, just do vanilla gradient
    // descent.
    for (int j = 0; j < batch_size; j++) {
      add_to_gradient(gradient, model, features_a[data_i], labels_a[data_i], num_features);
      add_to_gradient(gradient, model, features_b[data_i], labels_b[data_i], num_features);

      data_i = (data_i + 1) % num_entries;
    }

    double learning_rate_d = GetLearningRate(config, i);
    int learning_rate = learning_rate_d * (1 << PRECISION);
    
    for (int j = 0; j < num_features; j++) {
      gradient[j] = mult_op(gradient[j], learning_rate) / batch_size / 2;
      model[j] -= gradient[j];
    }
  }

  int* reveal_model = calloc(num_features, sizeof(int));
  for (int i = 0; i < num_features; i++) {
    revealOblivInt(reveal_model + i, model[i], 0);
  }

  io->model = reveal_model;

  gettimeofday(&t2, NULL);
  printf("Gate Count: %d\n", yaoGateCount());
  long elapsed;
  elapsed = (t2.tv_sec - t1.tv_sec) * 1000;
  elapsed += (t2.tv_usec - t1.tv_usec) / 1000;
  printf("Elapsed Time: %dms\n", elapsed);
}
